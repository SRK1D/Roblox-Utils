

function filtergc(typ: string, options, return_one: boolean?)
    -- Variables
    local return_one = return_one or false

    local possibleTables = {'Keys', 'Values', 'KeyValuePairs', 'Metatable'}
    local possibleFunctions = {'Name', 'Constants', 'Upvalues', 'IgnoreSyn', 'Proto', 'Environment', 'Hash'}
    local officialOptions = {}

    local functionChecks = {

        Name = function(func: (...any) -> ...any, name: string)
            --Name checking
            if debug.getinfo(func).name ~= name then
                return false
            end

            return true
        end,
        Constants = function(func: (...any) -> ...any, constants)
            local funcConstants = getconstants(func)

            --Constants length exceptions
            if #funcConstants == 0 then
                return false
            end

            for _, constant in ipairs(constants) do
                if not table.find(funcConstants, constant) then
                    return false
                end
            end

            return true
        end,
        Upvalues = function(func: (...any) -> ...any, upvalues)
            local funcUpvalues = getupvalues(func)

            --Upvalues length exceptions
            if #funcUpvalues == 0 then
                return false
            end

            for _, upvalue in ipairs(upvalues) do
                if not table.find(funcUpvalues, upvalue) then
                    return false
                end
            end

            return true
        end,
        IgnoreSyn = function(func: (...any) -> ...any, ignoreCondition: boolean?)
            if ignoreCondition == nil then
                return false
            end

            return not ignoreCondition
        end,
        Hash = function(func: (...any) -> ...any, hash: string)
            return getfunctionhash(func) == hash
        end

    }

    local tableChecks = {
        Keys = function(tablew, keys)
            for _, w in ipairs(keys) do
                if tablew[w] == nil then
                    return false
                end
            end
            
            return true
        end,
        Values = function(tablew, values)
            for _, val in ipairs(values) do
                local _f = false
                for __, pV in pairs(tablew) do
                    if pV == _f then
                        _f = true
                    end
                end

                if _f == false then
                    return false
                end
            end
            return true
        end,
        KeyValuePairs = function(tablew, values)
            for idx, val in pairs(values) do
                local _f = false
                for idx2, val2 in pairs(tablew) do
                    if idx2 == idx and val2 == val then
                        _f = true
                    end
                end

                if _f == false then
                    return false
                end
            end
            return true
        end
    }

    -- Assertions
    assert(table.find({'table', 'function'}, typ) ~= nil, 'Invalid type')

    if typ == 'table' then
        for _, w in ipairs(possibleTables) do
            table.insert(officialOptions, options[w] ~= nil and w or nil)
        end
    else
        for _, w in ipairs(possibleFunctions) do
            table.insert(officialOptions, options[w] ~= nil and w or nil)
        end

        table.insert(officialOptions, 'IgnoreSyn')
    end

    assert(#officialOptions ~= 0, 'The options table cannot be empty')

    local possibilities = {}

    local branch = typ == 'function' and functionChecks or tableChecks

    for _, w in pairs(getgc()) do
        if typeof(w) == typ then
            local f2 = true
            for z, f in officialOptions do
                if branch[f](w, options[f]) == false then
                    f2 = false
                    break
                end
            end

            if f2 then
                if return_one then
                    return w
                else
                    table.insert(possibilities, w)
                end
            end
        end
    end

    return possibilities
end

getgenv().filtergc = filtergc
